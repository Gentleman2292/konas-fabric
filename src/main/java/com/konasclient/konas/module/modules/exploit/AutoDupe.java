package com.konasclient.konas.module.modules.exploit;

import com.konasclient.konas.event.events.world.UpdateEvent;
import com.konasclient.konas.module.Category;
import com.konasclient.konas.module.Module;
import com.konasclient.konas.setting.Setting;
import com.konasclient.konas.util.client.Timer;
import meteordevelopment.orbit.EventHandler;
import net.minecraft.client.gui.screen.ingame.HorseScreen;
import net.minecraft.entity.Entity;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.passive.DonkeyEntity;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket;
import net.minecraft.screen.ScreenHandler;
import net.minecraft.screen.slot.Slot;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.util.Hand;
import net.minecraft.util.math.Vec3d;

public class AutoDupe extends Module {
    private Setting<Integer> range = new Setting<>("Entity Range", 3, 10, 0, 1);
    private Setting<Boolean> triggerable = new Setting<>("Triggerable", true);
    private Setting<Boolean> autoDisable = new Setting<>("Disable until Full", false);
    private Setting<Boolean> fullAuto = new Setting<>("Full Auto", false);
    private Setting<Boolean> autoDismount = new Setting<>("Dismount", true);
    private Setting<Boolean> autoReopenInventory = new Setting<>("Reopen", true);
    private Setting<Integer> delay = new Setting<>("Delay", 3, 10, 0, 1);
    private Setting<Boolean> aim = new Setting<>("Aim", false);
    private Setting<Integer> yaw = new Setting<>("Yaw", 0, 180, -180, 10);
    private Setting<Integer> pitch = new Setting<>("Pitch", 90, 90, -90, 5);

    public AutoDupe() {
        super("AutoDupe", "Automatically performs the single person TreeMC dupe", 0xFF8C6DD0, Category.Exploit);
    }

    private int cooldown = delay.getValue();
    private int donkeyFullness = 0;
    private boolean dismountNextTick = false;
    private boolean justDuped = false;
    private boolean justDismounted = false;
    private boolean unsneak = false;
    public static boolean a = false;
    private Timer aa = new Timer();

    @EventHandler
    public void onUpdatePre(UpdateEvent.Pre event) {
        /*if (unsneak) {
            mc.player.networkHandler.sendPacket(new ClientCommandC2SPacket(mc.player, ClientCommandC2SPacket.Mode.RELEASE_SHIFT_KEY));
            unsneak = false;
        }*/
        for (Entity target : mc.world.getEntities()) {
            if (!(target instanceof LivingEntity))
                continue;
            if (target == mc.player)
                continue;
            if (mc.player.distanceTo(target) > range.getValue())
                continue;
            if (((LivingEntity) target).getHealth() <= 0)
                continue;
            if (target instanceof DonkeyEntity) {
                try {
                    if (dismountNextTick && cooldown < 1) {
                        mc.player.closeHandledScreen();
                        mc.player.stopRiding();
                        mc.player.networkHandler.sendPacket(new ClientCommandC2SPacket(mc.player, ClientCommandC2SPacket.Mode.PRESS_SHIFT_KEY));
                        unsneak = true;
                        justDismounted = true;
                        dismountNextTick = false;
                        cooldown = delay.getValue();
                        return;
                    } else if (cooldown > 0) {
                        cooldown--;
                        return;
                    }
                    if (fullAuto.getValue() && !justDuped && justDismounted && autoReopenInventory.getValue() && target.hasPassengers()) {
                        if (cooldown > 0) {
                            --cooldown;
                            return;
                        }
                        if (cooldown < 1) {
                            try {
                                mc.player.openRidingInventory();
                                cooldown = delay.getValue();
                                justDismounted = false;
                                return;
                            } catch (Exception e) {
                                return;
                            }
                        }
                    }
                    if (mc.currentScreen instanceof HorseScreen) {
                        ScreenHandler horseInventory = ((HorseScreen) mc.currentScreen).getScreenHandler();
                        donkeyFullness = 0;
                        for (int i = 2; i <= 16; i++) {
                            Slot slot = horseInventory.getSlot(i);
                            if (slot.hasStack() && slot.getStack() != null) {
                                ++donkeyFullness;
                            }
                        }
                        if (fullAuto.getValue()) {
                            if (cooldown > 0) {
                                --cooldown;
                                return;
                            }
                            if (donkeyFullness == 0 && justDuped) {
                                justDuped = false;
                                mc.player.closeScreen();
                                if (autoDismount.getValue()) {
                                    dismountNextTick = true;
                                    return;
                                }

                            }
                            if (donkeyFullness == 15) {
                                if (!justDuped) {
                                    if (((DonkeyEntity) target).hasChest()) {
                                        if (aa.hasPassed(3000)) {
                                            Vec3d vec = new Vec3d(target.getX(), target.getY(), target.getZ());
                                            mc.player.networkHandler.sendPacket(new PlayerInteractEntityC2SPacket(target, Hand.MAIN_HAND, vec, mc.player.isSneaking()));
                                            aa.reset();
                                        }
                                    } else {
                                        justDuped = true;
                                    }
                                    return;
                                }
                            }

                            if (donkeyFullness > 0 && justDuped) {
                                if (aim.getValue()) {
                                    mc.player.yaw = yaw.getValue();
                                    if(mc.player.hasVehicle()) {
                                        mc.player.getVehicle().yaw = yaw.getValue();
                                    }
                                    mc.player.pitch = pitch.getValue();
                                    if(mc.player.hasVehicle()) {
                                        mc.player.getVehicle().pitch = pitch.getValue();
                                    }
                                }
                                for (int i = 2; i <= 16; ) {
                                    final ItemStack itemStack = mc.player.currentScreenHandler.getSlot(i).getStack();
                                    if (!itemStack.isEmpty() && itemStack.getItem() != Items.AIR) {
                                        mc.interactionManager.clickSlot(mc.player.currentScreenHandler.syncId, i, 1, SlotActionType.THROW, mc.player);
                                        cooldown = delay.getValue();
                                        return;
                                    }
                                    i++;
                                }
                                return;
                            }
                            if (donkeyFullness < 15 && !justDuped) {
                                for (int i = 17; i < 52; ) {
                                    Slot slot = horseInventory.getSlot(i);
                                    if (slot.hasStack() && slot.getStack() != null) {
                                        mc.interactionManager.clickSlot(mc.player.currentScreenHandler.syncId, i, 0, SlotActionType.QUICK_MOVE, mc.player);
                                        cooldown = delay.getValue();
                                        i++;
                                        return;
                                    } else i++;
                                }
                            }
                        } else {
                            if (autoDisable.getValue() && donkeyFullness < 15) {
                                return;
                            }
                            Vec3d vec = new Vec3d(target.getX(), target.getY(), target.getZ());
                            mc.player.networkHandler.sendPacket(new PlayerInteractEntityC2SPacket(target, Hand.MAIN_HAND, vec, mc.player.isSneaking()));
                            if (triggerable.getValue()) {
                                toggle(false);
                            }
                        }
                    }
                } catch (Exception e) {

                }
            }
        }
    }
}
